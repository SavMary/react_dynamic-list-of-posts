{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","options","a","fetch","json","getUserPosts","userId","response","getPostDetails","postId","PostsList","onPostIdHandler","selectedPostId","useState","posts","setPosts","isOpen","setIsOpen","userPosts","postItems","useEffect","className","map","post","title","type","onClick","id","getPostComments","method","deleteComment","commentId","addComment","comment","headers","body","JSON","stringify","NewCommentForm","comments","onCommentsHandler","name","setName","email","setEmail","setComment","isError","setIsError","submitHandler","event","preventDefault","newComment","length","onSubmit","value","onChange","target","placeholder","style","color","PostDetails","visibleComments","setVisibleComments","setPost","setComments","postHandler","postDetails","commentItems","deleteHandler","newComments","currentComments","App","selectedUser","setSelectedUser","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87be7836.chunk.js","sourcesContent":["import { Options } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options: Options) => {\n  return (await fetch(url, options)).json();\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number | null) => {\n  let response;\n\n  if (!userId) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/:${postId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ntype Props = {\n  userId: string;\n  onPostIdHandler: (postId: number | null) => void,\n  selectedPostId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userId, onPostIdHandler, selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isOpen, setIsOpen] = useState(true);\n\n  const userPosts = async () => {\n    const postItems = await getUserPosts(+userId);\n\n    setPosts(postItems);\n  };\n\n  useEffect(() => {\n    userPosts();\n  }, [userId]);\n\n  const clickHandler = (postId: number) => {\n    if (selectedPostId !== postId) {\n      onPostIdHandler(postId);\n    } else {\n      onPostIdHandler(null);\n    }\n\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`User# ${post.userId}`}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => clickHandler(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Comment } from '../react-app-env';\nimport { BASE_URL, request } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await request(`${BASE_URL}/comments?postId=${postId}`, { method: 'GET' });\n\n  return response;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  await request(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = async (comment: Comment) => {\n  await request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify({ comment }),\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport { Comment, Post } from '../../react-app-env';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  post: Post,\n  comments: Comment[],\n  onCommentsHandler: (newComment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  post, comments, onCommentsHandler,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isError, setIsError] = useState(false);\n\n  const isFormValid = () => {\n    if (name && email && comment) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const submitHandler = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isFormValid()) {\n      const newComment = {\n        id: comments.length + 1,\n        postId: post.id + 1,\n        name,\n        email,\n        body: comment,\n      };\n\n      await addComment(newComment);\n      onCommentsHandler(newComment);\n      setIsError(false);\n      setName('');\n      setEmail('');\n      setComment('');\n    } else {\n      setIsError(true);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={submitHandler}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment}\n          onChange={event => setComment(event.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      {isError && (\n        <div style={{ color: 'red' }}>\n          Please, fill in all fields\n        </div>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment, Post } from '../../react-app-env';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [visibleComments, setVisibleComments] = useState(true);\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const postHandler = async () => {\n    const postDetails = await getPostDetails(postId);\n\n    setPost(postDetails);\n\n    const commentItems = await getPostComments(postId);\n\n    setComments(commentItems);\n  };\n\n  useEffect(() => {\n    postHandler();\n  }, [postId]);\n\n  const deleteHandler = async (commentId: number) => {\n    if (postId) {\n      await deleteComment(commentId);\n      const newComments = await getPostComments(postId);\n\n      setComments(newComments);\n    }\n  };\n\n  const commentsHandler = (newComment: Comment) => {\n    setComments(currentComments => [...currentComments, newComment]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setVisibleComments(!visibleComments);\n          }}\n        >\n          {visibleComments ? 'Hide comments' : 'Show comments'}\n        </button>\n        {visibleComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteHandler(comment.id)}\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {post && (\n            <NewCommentForm\n              post={post}\n              comments={comments}\n              onCommentsHandler={commentsHandler}\n            />\n          )}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const postIdhandler = (postId: number | null) => {\n    if (postId) {\n      setSelectedPostId(postId);\n    } else {\n      setSelectedPostId(null);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUser}\n            onPostIdHandler={postIdhandler}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && (\n            <PostDetails postId={selectedPostId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}