{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","options","a","fetch","json","getUsers","getUserPosts","userId","response","getPostDetails","postId","PostsList","onPostIdHandler","selectedPostId","useState","posts","setPosts","isOpen","setIsOpen","userPosts","postItems","useEffect","className","map","post","title","type","onClick","id","getPostComments","method","deleteComment","commentId","addComment","comment","headers","body","JSON","stringify","NewCommentForm","onCommentsHandler","name","setName","email","setEmail","setComment","isError","setIsError","submitHandler","event","preventDefault","newComment","onSubmit","value","onChange","target","placeholder","PostDetails","visibleComments","setVisibleComments","setPost","comments","setComments","hasLoadingError","setHasLoadingError","postHandler","postDetails","commentItems","deleteHandler","newComments","commentsHandler","classnames","noshow","length","App","selectedUser","setSelectedUser","setSelectedPostId","users","setUsers","then","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2a28f1e.chunk.js","sourcesContent":["import { Options } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options: Options) => {\n  return (await fetch(url, options)).json();\n};\n\nexport const getUsers = async () => {\n  return (await fetch(`${BASE_URL}/users`)).json();\n};\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async (userId: number) => {\n  let response;\n\n  if (!userId) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/:${postId}`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../../react-app-env';\nimport './PostsList.scss';\n\ntype Props = {\n  userId: string;\n  onPostIdHandler: (postId: number | null) => void,\n  selectedPostId: number | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userId, onPostIdHandler, selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isOpen, setIsOpen] = useState(true);\n\n  const userPosts = async () => {\n    const postItems = await getUserPosts(+userId);\n\n    setPosts(postItems);\n  };\n\n  useEffect(() => {\n    userPosts();\n  }, [userId]);\n\n  const clickHandler = (postId: number) => {\n    if (selectedPostId !== postId) {\n      onPostIdHandler(postId);\n    } else {\n      onPostIdHandler(null);\n    }\n\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                {`User# ${post.userId}`}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => clickHandler(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { NewComment } from '../react-app-env';\nimport { BASE_URL, request } from './api';\n\nexport const getPostComments = async (postId: number) => {\n  const response = await request(`${BASE_URL}/comments?postId=${postId}`, { method: 'GET' });\n\n  return response;\n};\n\nexport const deleteComment = async (commentId: number) => {\n  await request(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const addComment = async (comment: NewComment) => {\n  await request(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: { 'Content-type': 'application/json; charset=UTF-8' },\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { FormEvent, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number,\n  onCommentsHandler: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId, onCommentsHandler,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isError, setIsError] = useState(false);\n\n  const isFormValid = () => {\n    if (name && email && comment) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const submitHandler = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (isFormValid()) {\n      const newComment = {\n        postId,\n        name,\n        email,\n        body: comment,\n      };\n\n      await addComment(newComment);\n      onCommentsHandler();\n      setIsError(false);\n      setName('');\n      setEmail('');\n      setComment('');\n    } else {\n      setIsError(true);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={submitHandler}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment}\n          onChange={event => setComment(event.target.value)}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n      {isError && (\n        <div className=\"error\">\n          Please, fill in all fields\n        </div>\n      )}\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport { deleteComment, getPostComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment, Post } from '../../react-app-env';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [visibleComments, setVisibleComments] = useState(true);\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  const postHandler = async () => {\n    try {\n      const postDetails = await getPostDetails(postId);\n\n      setPost(postDetails);\n      setHasLoadingError(false);\n    } catch (error) {\n      setHasLoadingError(true);\n      setPost(null);\n    }\n\n    try {\n      const commentItems = await getPostComments(postId);\n\n      setComments(commentItems);\n      setHasLoadingError(false);\n    } catch (error) {\n      setHasLoadingError(true);\n    }\n  };\n\n  useEffect(() => {\n    postHandler();\n  }, [postId]);\n\n  const deleteHandler = async (commentId: number) => {\n    if (postId) {\n      await deleteComment(commentId);\n      const newComments = await getPostComments(postId);\n\n      setComments(newComments);\n    }\n  };\n\n  const commentsHandler = async () => {\n    const newComments = await getPostComments(postId);\n\n    setComments(newComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {hasLoadingError ? (\n        <p className=\"error\">An error occurred while loading the data</p>\n      ) : (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post?.body}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className={classnames('button', {\n                noshow: comments.length < 1,\n              })}\n              onClick={() => {\n                setVisibleComments(!visibleComments);\n              }}\n            >\n              {visibleComments ? 'Hide comments' : 'Show comments'}\n            </button>\n            {visibleComments && (\n              <ul className=\"PostDetails__list\">\n                {comments?.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => deleteHandler(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              {post && (\n                <NewCommentForm\n                  postId={postId}\n                  onCommentsHandler={commentsHandler}\n                />\n              )}\n            </div>\n          </section>\n        </>\n      )}\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { User } from './react-app-env';\nimport { getUsers } from './api/api';\n\nconst App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState('');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const postIdhandler = (postId: number | null) => {\n    if (postId) {\n      setSelectedPostId(postId);\n    } else {\n      setSelectedPostId(0);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(response => setUsers(response));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUser}\n            onPostIdHandler={postIdhandler}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails postId={selectedPostId} />\n          ) : (\n            <p>No selected posts</p>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}